(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{480:function(t,s,a){t.exports=a.p+"assets/img/opencv-build-1.421ff658.png"},481:function(t,s,a){t.exports=a.p+"assets/img/opencv-build-2.cee38401.png"},482:function(t,s,a){t.exports=a.p+"assets/img/opencv-build-3.8c5ba46d.png"},519:function(t,s,a){"use strict";a.r(s);var e=a(65),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"custom-build-opencv-js"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#custom-build-opencv-js"}},[t._v("#")]),t._v(" custom build OpenCV.js")]),t._v(" "),e("ul",[e("li",[t._v("OpenCV是一个强大的计算机视觉库，可让访问许多基本和高级的图像处理操作。")]),t._v(" "),e("li",[t._v("OpenCV支持Javascript和WebAssembly构建，我们可以在Web应用程序中使用OpenCv。")])]),t._v(" "),e("hr"),t._v(" "),e("h2",{attrs:{id:"先决条件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#先决条件"}},[t._v("#")]),t._v(" 先决条件")]),t._v(" "),e("p",[t._v("确保本地安装了git、cmake 和 python (>= 2.7)")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[t._v("$ sudo apt install git\n$ sudo apt install cmake\n$ sudo apt install python\n")])])]),e("hr"),t._v(" "),e("h2",{attrs:{id:"设置emscripten"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#设置emscripten"}},[t._v("#")]),t._v(" 设置Emscripten")]),t._v(" "),e("ul",[e("li",[t._v("Emscripten是一个LLVM-to-JavaScript的编译器。我们将使用Emscripten来构建OpenCV.js。")]),t._v(" "),e("li",[t._v("创建一个新的目录来安装Emscripten")])]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[t._v("$ mkdir build"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("opencv\n\n$ cd build"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("opencv"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("\n\n$ git clone git@github"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("emscripten"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("core"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("emscripten"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("git\n\n$ cd emsdk"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("emsdk install latest\n$ "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("emsdk activate latest\n$ source "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("emsdk_env"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sh\n")])])]),e("hr"),t._v(" "),e("h2",{attrs:{id:"emscripten测试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#emscripten测试"}},[t._v("#")]),t._v(" Emscripten测试")]),t._v(" "),e("ul",[e("li",[t._v("确保Emscripten安装正确，创建一个新目录hello并创建然后编译一个hello.c文件")])]),t._v(" "),e("div",{staticClass:"language-JavaScript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[t._v("$ mkdir hello\n$ cd hello\n$ cat "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("EOF")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" hello"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c\n#include "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("stdio"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("h"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nint "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("int argc"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" char "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v(" argv")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello, world!\\n"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("EOF")]),t._v("\n# compile\n$ emcc hello"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("o hello"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("html\n\n# run the emrun webserver included "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" the Emscripten "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SDK")]),t._v("\n$ emrun "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("no_browser "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("port "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8080")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])])]),e("ul",[e("li",[t._v("现在可以访问http://localhost:8080看到 hello world 输出")])]),t._v(" "),e("p",[e("img",{attrs:{src:a(480),alt:"build opencv"}})]),t._v(" "),e("ul",[e("li",[t._v("现在我们可以编译openCV的WebAssembly版本")])]),t._v(" "),e("hr"),t._v(" "),e("h2",{attrs:{id:"获取opencv"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#获取opencv"}},[t._v("#")]),t._v(" 获取openCV")]),t._v(" "),e("ul",[e("li",[t._v("回到build-opencv目录，并从Github下载最新的openCV")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git clone git@github.com:opencv/opencv.git\n")])])]),e("ul",[e("li",[t._v("我们使用的是OpenCV 4.5.4")])]),t._v(" "),e("hr"),t._v(" "),e("h2",{attrs:{id:"删除不需要的模块"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#删除不需要的模块"}},[t._v("#")]),t._v(" 删除不需要的模块")]),t._v(" "),e("ul",[e("li",[t._v("openCV默认包括了很多功能，例如深度神经网络（DNN），我们在web中不是最佳的选择，所以我们移除DNN模块")]),t._v(" "),e("li",[t._v("打开文件 "),e("strong",[t._v("opencv/platforms/js/build_js.py")]),t._v("，找到函数"),e("strong",[t._v("get_cmake_cmd(self):")]),t._v(" 设置 "),e("strong",[t._v("DNN Module")]),t._v("为 OFF")])]),t._v(" "),e("p",[e("img",{attrs:{src:a(481),alt:"build opencv"}})]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),e("p",[t._v("我们移除了不需要用到的模块，减小了构建文件的大小，也可以根据自己需要的功能自定义处理不需要的模块")])]),t._v(" "),e("ul",[e("li",[t._v("默认情况下我们构建出来的是一个包含了webassembly文件的opencv.js的文件，如果需要单独构建.wasm文件，我们需要打开文件"),e("strong",[t._v("opencv/modules/js/CMakeLists.txt")]),t._v(" 找到这行")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('-set(EMSCRIPTEN_LINK_FLAGS "${EMSCRIPTEN_LINK_FLAGS} -s MODULARIZE=1 -s SINGLE_FILE=1")\n')])])]),e("p",[t._v("删除 "),e("strong",[t._v("-s SINGLE_FILE=1")]),t._v(" 后")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('set(EMSCRIPTEN_LINK_FLAGS "${EMSCRIPTEN_LINK_FLAGS} -s MODULARIZE=1")\n')])])]),e("hr"),t._v(" "),e("h2",{attrs:{id:"构建"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#构建"}},[t._v("#")]),t._v(" 构建")]),t._v(" "),e("p",[t._v("-- 要构建WebAssembly版本，附加 "),e("strong",[t._v("--build_wasm")]),t._v(" 标志")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 进入opencv目录\n$ cd opencv/\n\n# 开始build\n$ python --build_wasm ./opencv/platforms/js/build_js.py build_js --build_wasm\n# 或者指定emscripten目录\n$ python platforms/js/build_js.py build_out --emscripten_dir /Users/yuexihuachen/Documents/project/emsdk/upstream/emscripten --build_wasm --clean_build_dir\n")])])]),e("ul",[e("li",[t._v("如果一切顺利，开始构建一段时间后，会收到以下消息")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("===== Build finished =====\nOpenCV.js location: /Users/yuexihuachen/Documents/project/opencv/build_out/bin/opencv.js\n")])])]),e("ul",[e("li",[t._v("进入build_out我们看到的结果")])]),t._v(" "),e("p",[e("img",{attrs:{src:a(482),alt:"build opencv"}})])])}),[],!1,null,null,null);s.default=n.exports}}]);