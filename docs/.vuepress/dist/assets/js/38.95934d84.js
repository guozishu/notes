(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{519:function(t,s,i){"use strict";i.r(s);var e=i(65),n=Object(e.a)({},(function(){var t=this.$createElement,s=this._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[s("h1",{attrs:{id:"集成测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#集成测试"}},[this._v("#")]),this._v(" 集成测试")]),this._v(" "),s("ul",[s("li",[s("p",[this._v("就像这个测试的名字（集成）所表达的意思一样，集成测试想要测试的是这个系统的各个部分在一起合作的如何－将各个代码块集成在一起。集成测试和单元测试很类似，但是有一个很大的不同：单元测试是不依靠于其他组件的，只测试某段代码，但是集成测试不是。举个例子，一段数据库访问代码的单元测试是不需要和真正的数据库连接的，但是集成测试不是这样。")])]),this._v(" "),s("li",[s("p",[this._v("有的情况下，单元测试不能够满足测试要求，这个时候集成测试就大有用处。有时候你需要验证两个不同的系统是否在一起正常的通信和正常运转，比如你的应用程序和数据库是否集成正确，运转正常，这个时候就需要集成测试了。结果是，当验证集成测试结果时，你通过写数据库连接语句检查数据库状态是否正常而顺便做了数据库连接测试。")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);